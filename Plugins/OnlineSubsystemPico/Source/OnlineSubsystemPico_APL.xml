<?xml version="1.0" encoding="utf-8"?>

<root xmlns:android="http://schemas.android.com/apk/res/android">
  <!-- init section is always evaluated once per architecture -->
  <init>
    <setBoolFromProperty result="bStartTimeEntitlementCheck" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="bStartTimeEntitlementCheck" default="false"/>
    <setStringFromProperty result="EntitlementCheckAppID" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="EntitlementCheckAppID" default=""/>
    <setBoolIsEqual result="bAppIdIsEmpty" arg1="$S(EntitlementCheckAppID)" arg2=""/>
    <setBoolFromProperty result="bEnablePaymentModule" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="bEnablePaymentModule" default="false"/>
    <setBoolFromProperty result="bIsForeign" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="bIsForeign" default="false"/>
  </init>

  <!-- optional updates applied to AndroidManifest.xml -->
  <androidManifestUpdates>
    <if condition="bEnablePaymentModule">
      <true>
        <setStringFromProperty result="Payment_AppID" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="Payment_AppID" default=""/>
        <setStringFromProperty result="Payment_AppKey" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="Payment_AppKey" default=""/>
        <setStringFromProperty result="Payment_Scope" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="Payment_Scope" default="get_user_info"/>
        <setStringFromProperty result="Payment_MerchantID" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="Payment_MerchantID" default=""/>
        <setStringFromProperty result="Payment_PayKey" ini="Engine" section="/Script/OnlineSubsystemPico.OnlinePicoSettings" property="Payment_PayKey" default=""/>
        <if condition="bIsForeign">
          <true>
            <log text="Copy Pico Payment Infos For Foreign"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_app_id_foreign"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_AppID)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_app_key_foreign"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_AppKey)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_scope_foreign"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_Scope)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_merchant_id_foreign"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_MerchantID)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_pay_key_foreign"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_PayKey)"/>
            <addElement tag="application" name="metaData"/>
          </true>
          <false>
            <log text="Copy Pico Payment Infos For China"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_app_id"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_AppID)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_app_key"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_AppKey)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_scope"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_Scope)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_merchant_id"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_MerchantID)"/>
            <addElement tag="application" name="metaData"/>
            <setElement result="metaData" value="meta-data"/>
            <addAttribute tag="$metaData" name="android:name" value="pico_pay_key"/>
            <addAttribute tag="$metaData" name="android:value" value="$S(Payment_PayKey)"/>
            <addElement tag="application" name="metaData"/>
          </false>
        </if>
      </true>
    </if>
    <if condition="bStartTimeEntitlementCheck">
      <false>
        <addElements tag="application">
          <meta-data android:name="enable_entitlementcheck" android:value="0" />
        </addElements>
      </false>
      <true>
        <if condition="bAppIdIsEmpty">
          <false>
            <addElements tag="application">
              <meta-data android:name="enable_entitlementcheck" android:value="1" />
            </addElements>
          </false>
          <true>
            <addElements tag="application">
              <meta-data android:name="enable_entitlementcheck" android:value="0" />
            </addElements>
          </true>
        </if>
      </true>
    </if>
  </androidManifestUpdates>

  <!-- optional files or directories to copy to Intermediate/Android/APK -->
  <resourceCopies>
    <copyFile src="$S(PluginDir)/../Libs/achievement.jar"
              dst="$S(BuildDir)/libs/achievement.jar" />
    <copyFile src="$S(PluginDir)/../Libs/initServer.jar"
              dst="$S(BuildDir)/libs/initServer.jar" />
    <copyFile src="$S(PluginDir)/../Libs/PaymentSDK_Android-v1.0.33.jar"
              dst="$S(BuildDir)/libs/PaymentSDK_Android-v1.0.33.jar" />
  </resourceCopies>

  <gameActivityImportAdditions>
    <insert>
      <!--import about achievement-->
      import com.pico.achievement.AchievementAPI;
      import com.picovr.achievement.bean.PvrMessage;
      import com.picovr.achievement.bean.MessageType;
      import com.picovr.achievement.utils.pvrAchievementDefinitionArrayHandle;
      import com.picovr.achievement.utils.pvrAchievementDefinitionHandle;
      import com.picovr.achievement.utils.pvrAchievementProgressArrayHandle;
      import com.picovr.achievement.utils.pvrAchievementProgressHandle;
      import com.picovr.achievement.utils.pvrAchievementUpdateHandle;
      <!--import about Pay -->
      import com.pico.loginpaysdk.auth.AccessInfo;
      import com.pico.loginpaysdk.auth.Callback;
      import com.pico.loginpaysdk.auth.sso.Login;
      import com.pico.loginpaysdk.exception.PicoException;
      import com.pico.loginpaysdk.net.RequestListener;
      import com.pico.loginpaysdk.utils.PicoAccessTokenKeeper;
      import com.pico.loginpaysdk.pay.PaySdkCallBack;
      import com.pico.loginpaysdk.pay.PicoPay;
      import com.pico.loginpaysdk.pay.model.PayOrder;
      import com.pico.loginpaysdk.utils.RandomUtil;
      import android.view.KeyEvent;
      import android.util.Log;
      
    </insert>
  </gameActivityImportAdditions>

  <gameActivityClassAdditions>
  <insert>
          private Login mLogin;
          private AccessInfo mAccessInfo;
          private MyPayCallBack mMyPayCallBack;
          private MyQueryOrdersCallBack mMyQueryOrdersCallBack;
          public native void nativePicoLogInCallback(boolean isSuccess, String reason);
          public native void nativePicoLogOutCallback(boolean isSuccess, String reason);
          public native void nativePicoGetUserInfoCompleteCallback(String info);
          public native void nativePicoPayOrderCallback(String code, String msg);
          public native void nativePicoPaymentExceptionCallback(String exception);
          public native void nativePicoQueryOrdersCallback(String code, String msg);

          public void Payment_Login()
          {
              if (mLogin != null)
              {
                  mLogin.login(new Callback()
                  {
                      @Override
                      public void loginCallback(boolean isSuccess, String reason)
                      {
                          nativePicoLogInCallback(isSuccess,reason);
                      }
                  }); 
              }
              else
              {
                  Log.debug("OnlineSubsystemPico_APL Login class is not created!");
              }
          }

          public void Payment_Logout()
          {
              if (mLogin != null)
              {
                  mLogin.logout(this, new Callback()
                  {
                      @Override
                      public void loginCallback(boolean isSuccess, String reason)
                      {
                          nativePicoLogOutCallback(isSuccess,reason);
                      }
                  });
              }
              else
              {
                  Log.debug("OnlineSubsystemPico_APL Login class is not created!");
              }
          }

          public void Payment_GetUserInfo()
          {
              if (mLogin != null)
              {
                  mLogin.getUserInfo(new RequestListener()
                  {
                      @Override
                      public void onComplete(String paramString)
                      {
                          nativePicoGetUserInfoCompleteCallback(paramString);
                      }
                      @Override
                      public void onException(PicoException paramException)
                      {
                          nativePicoPaymentExceptionCallback(paramException.getMessage());
                      }
                  });
              }
              else
              {
                  Log.debug("OnlineSubsystemPico_APL Login class is not created!");
              }
          }

          public void Payment_PayWithPayCode(String orderNumber, String orderTitle, String productDetail, String notifyUrl, String payCode)
          {
              PayOrder mOrder = new PayOrder();
              mOrder.setBusinessOrder(orderNumber);
              mOrder.setSubject(orderTitle);
              mOrder.setBody(productDetail);
              mOrder.setNotifyUrl(notifyUrl);
              mOrder.setPayCode(payCode);
              PicoPay.getInstance(this).pay(mOrder,mMyPayCallBack);
          }

          public void Payment_PayWithCoin(String orderNumber, String orderTitle, String productDetail, String notifyUrl, int coinCount)
          {
              PayOrder mOrder = new PayOrder();
              mOrder.setBusinessOrder(orderNumber);
              mOrder.setSubject(orderTitle);
              mOrder.setBody(productDetail);
              mOrder.setNotifyUrl(notifyUrl);
              mOrder.setTotalFree(String.valueOf(coinCount));
              PicoPay.getInstance(this).pay(mOrder,mMyPayCallBack);
          }

          public void Payment_QueryOrder(String orderNumber)
          {
              PicoPay.getInstance(this).queryOrders(orderNumber,mMyQueryOrdersCallBack);
          }

          class MyPayCallBack implements PaySdkCallBack
          {
              @Override
              public void callback(String code, String msg)
              {
                  nativePicoPayOrderCallback(code,msg);
              }
              @Override
              public void exceptionCallBack(String msg)
              {
                  nativePicoPaymentExceptionCallback(msg);
              }
          }

          class MyQueryOrdersCallBack implements PaySdkCallBack
          {
              @Override
              public void callback(String code, String msg)
              {
                  nativePicoQueryOrdersCallback(code,msg);
              }
              @Override
              public void exceptionCallBack(String msg)
              {
                  nativePicoPaymentExceptionCallback(msg);
              }
          }
    </insert>
    <if condition="bStartTimeEntitlementCheck">
      <true>
        <insert>
          <!-- About app check -->
          VerifyTool mVerifyTool = null;
          public native void JavaToCVerifyCallback(int code);
          NativeVerfyInterface VerfyInterfaceCallback = new NativeVerfyInterface()
          {
              @Override
              public void bindSuccessCallback()
              {
                  Log.debug("OnlineSubsystemPico_APL bindSuccessCallback");
              }
              @Override
              public void verifyCallback(int Code)
              {
                  Log.debug("OnlineSubsystemPico_APL verifyCallback code = "+Code);
                  JavaToCVerifyCallback(Code);
              }
          };
          public int AndroidThunkJava_VerifyApp(String appID, String publicKey)
          {
              return VerifyTool.verifyAPPExt(this.getApplicationContext(),appID,publicKey);
          }
        </insert>
      </true>
    </if>
    <insert>
      public native static void SetInitRequestID(long ipd);
      public void Achievement_Login()
      {
          if (mLogin != null)
          {
              mLogin.login(new Callback()
              {
                  @Override
                  public void loginCallback(boolean isSuccess, String reason)
                  {
                      Log.debug("OnlineSubsystemPico_APL loginCallback isSuccess "+isSuccess+ "  Reason: "+reason);
                      Log.debug("OnlineSubsystemPico_APL loginCallback call InitAchievementAPI");
                      if(!isSuccess)
                      {
                          Achievement_Logout();
                      }
                      long RequestID = InitAchievementAPI();
                      SetInitRequestID(RequestID);
                  }
              });
          }
          else
          {
              Log.debug("OnlineSubsystemPico_APL Login class is not created!");
          }
      }

      public void Achievement_Logout()
      {
          if (mLogin != null) 
          {
              mLogin.logout(this, null);
          }
      }
      
      public AccessInfo GetAccessInfo()
      {
          return PicoAccessTokenKeeper.readAccessToken(this.getApplicationContext());
      }

      public String GetOpenID()
      {
          return GetAccessInfo().getOpenId();
      }

      public long InitAchievementAPI()
      {
          long ret = AchievementAPI.init(GetAccessInfo().getAccessToken(),GetAccessInfo().getOpenId(),this.getApplicationContext());
          return ret;
      }

      public PvrMessage Achievement_PopMessage()
      {
          return AchievementAPI.pvr_PopMessage();
      }

      public long Achievement_AddCount(String AchievementId,long Count)
      {
          return AchievementAPI.pvr_Achievements_AddCount(AchievementId,Count,GetAccessInfo().getAccessToken());
      }

      public long Achievement_AddFields(String AchievementId,String Fields)
      {
          return AchievementAPI.pvr_Achievements_AddFields(AchievementId,Fields,GetAccessInfo().getAccessToken());
      }

      public long Achievement_GetAllDefinitions(String AppId)
      {
          return AchievementAPI.pvr_Achievements_GetAllDefinitions(AppId,this.getApplicationContext());
      }

      public long Achievement_GetDefinitionsByName(String[] AchievementIds)
      {
          return AchievementAPI.pvr_Achievements_GetDefinitionsByName(AchievementIds,this.getApplicationContext());
      }
      
      public long Achievement_GetAllProgress()
      {
          return AchievementAPI.pvr_Achievements_GetAllProgress(GetAccessInfo().getAccessToken());
      }

      public long Achievement_Unlock(String AchievementId)
      {
          return AchievementAPI.pvr_Achievements_Unlock(AchievementId,GetAccessInfo().getAccessToken());
      }

      public long Message_GetMessageHandleType(PvrMessage msg)
      {
          return msg.getHandleType().getIndex();
      }

      public long Message_GetMessageId(PvrMessage msg)
      {
          return msg.getId();
      }

      public boolean Message_GetMessageIsError(PvrMessage msg)
      {
          return msg.isMessage_IsError();
      }

      public int AchievementDefinitionArray_GetSize(PvrMessage msg)
      {
          return pvrAchievementDefinitionArrayHandle.pvr_AchievementDefinitionArray_GetSize(msg);
      }

      public PvrMessage AchievementDefinitionArray_GetElement(PvrMessage msg,int Index)
      {
          return pvrAchievementDefinitionArrayHandle.pvr_AchievementDefinitionArray_GetElement(msg,Index);
      }

      public String AchievementDefinitionArray_GetNextUrl(PvrMessage msg)
      {
          return pvrAchievementDefinitionArrayHandle.pvr_AchievementDefinitionArray_GetNextUrl(msg);
      }

      public boolean AchievementDefinitionArray_HasNextPage(PvrMessage msg)
      {
          return pvrAchievementDefinitionArrayHandle.pvr_AchievementDefinitionArray_HasNextPage(msg);
      }

      public long Achievements_GetAllDefinitionsByUrl(String msg)
      {
          return AchievementAPI.pvr_Achievements_GetAllDefinitionsByUrl(msg,this.getApplicationContext());
      }      

      public String AchievementDefinition_GetName(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetName(msg);
      }

      public int AchievementDefinition_GetBitfieldLength(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetBitfieldLength(msg);
      }

      public long AchievementDefinition_GetTarget(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetTarget(msg);
      }

      public int AchievementDefinition_GetType(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetType(msg).getIndex();
      }

      public String AchievementDefinition_GetTitle(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetTitle(msg);
      }

      public String AchievementDefinition_GetDescription(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetDescription(msg);
      }

      public boolean AchievementDefinition_GetIsSecret(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetIs_secret(msg);
      }

      public String AchievementDefinition_GetUnlockedDescription(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetUnlocked_description(msg);
      }

      public String AchievementDefinition_GetUnlockedImage(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetUnlocked_image(msg);
      }

      public String AchievementDefinition_GetLockedImage(PvrMessage msg)
      {
          return pvrAchievementDefinitionHandle.pvr_AchievementDefinition_GetLocked_image(msg);
      }

      public int AchievementProgressArray_GetSize(PvrMessage msg)
      {
          return pvrAchievementProgressArrayHandle.pvr_AchievementProgressArray_GetSize(msg);
      }

      public PvrMessage AchievementProgressArray_GetElement(PvrMessage msg,int Index)
      {
          return pvrAchievementProgressArrayHandle.pvr_AchievementProgressArray_GetElement(msg,Index);
      }

      public String AchievementProgressArray_GetNextUrl(PvrMessage msg)
      {
          return pvrAchievementProgressArrayHandle.pvr_AchievementProgressArray_GetNextUrl(msg);
      }

      public boolean AchievementProgressArray_HasNextPage(PvrMessage msg)
      {
          return pvrAchievementProgressArrayHandle.pvr_AchievementProgressArray_HasNextPage(msg);
      }

      public long Achievements_GetAllProgressByUrl(String msg)
      {
          return AchievementAPI.pvr_Achievements_GetAllProgressByUrl(msg);
      }
      
      public String AchievementProgress_GetBitfield(PvrMessage msg)
      {
          return pvrAchievementProgressHandle.pvr_AchievementProgress_GetBitfield(msg);
      }

      public long AchievementProgress_GetCount(PvrMessage msg)
      {
          return pvrAchievementProgressHandle.pvr_AchievementProgress_GetCount(msg);
      }

      public boolean AchievementProgress_GetIsUnlocked(PvrMessage msg)
      {
          return pvrAchievementProgressHandle.pvr_AchievementProgress_GetIsUnlocked(msg);
      }

      public String AchievementProgress_GetName(PvrMessage msg)
      {
          return pvrAchievementProgressHandle.pvr_AchievementProgress_GetName(msg);
      }

      public boolean AchievementUpdate_GetJustUnlocked(PvrMessage msg)
      {
          return pvrAchievementUpdateHandle.pvr_AchievementUpdate_GetJustUnlocked(msg);
      }

      public long AchievementProgress_GetUnlockTime(PvrMessage msg)
      {
          return pvrAchievementProgressHandle.pvr_AchievementProgress_GetUnlockTime(msg);
      }
      
      public String AchievementUpdate_GetName(PvrMessage msg)
      {
          return pvrAchievementUpdateHandle.pvr_AchievementUpdate_GetName(msg);
      }

      public String OnlineGetDeviceSN( )
      {
          return SysActivity.getDeviceSN();
      }
    </insert>
  </gameActivityClassAdditions>

  <gameActivityOnCreateAdditions>
    <insert>
      mLogin = new Login(this.getApplicationContext());
      mMyPayCallBack = new MyPayCallBack();
      mMyQueryOrdersCallBack = new MyQueryOrdersCallBack();
      AchievementAPI.registerNetwork(this.getApplicationContext());
    </insert>
    <if condition="bStartTimeEntitlementCheck">
      <true>
        <insert>
          mVerifyTool = new VerifyTool();
          VerifyTool.registerCallback(VerfyInterfaceCallback);
          mVerifyTool.bindVerifyService(this.getApplicationContext(),null);
        </insert>
      </true>
    </if>
  </gameActivityOnCreateAdditions>

  <gameActivityOnDestroyAdditions>
    <insert>
      AchievementAPI.unregisterNetwork();
    </insert>
    <if condition="bStartTimeEntitlementCheck">
      <true>
        <insert>
          VerifyTool.unRegisterCallback(VerfyInterfaceCallback);
          mVerifyTool.unbindVerifyService();
        </insert>
      </true>
    </if>
  </gameActivityOnDestroyAdditions>
  
</root>